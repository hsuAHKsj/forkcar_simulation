// Generated by gencpp from file agv_robot/car_info.msg
// DO NOT EDIT!


#ifndef AGV_ROBOT_MESSAGE_CAR_INFO_H
#define AGV_ROBOT_MESSAGE_CAR_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_robot
{
template <class ContainerAllocator>
struct car_info_
{
  typedef car_info_<ContainerAllocator> Type;

  car_info_()
    : car_state(0)
    , is_rotation_finish(false)
    , index(0)  {
    }
  car_info_(const ContainerAllocator& _alloc)
    : car_state(0)
    , is_rotation_finish(false)
    , index(0)  {
  (void)_alloc;
    }

   typedef int32_t _car_state_type;
  _car_state_type car_state;

   typedef uint8_t _is_rotation_finish_type;
  _is_rotation_finish_type is_rotation_finish;

   typedef int32_t _index_type;
  _index_type index;

  typedef boost::shared_ptr< ::agv_robot::car_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_robot::car_info_<ContainerAllocator> const> ConstPtr;

}; // struct car_info_

typedef ::agv_robot::car_info_<std::allocator<void> > car_info;

typedef boost::shared_ptr< ::agv_robot::car_info > car_infoPtr;
typedef boost::shared_ptr< ::agv_robot::car_info const> car_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_robot::car_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_robot::car_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agv_robot::car_info_<ContainerAllocator1> & lhs, const ::agv_robot::car_info_<ContainerAllocator2> & rhs)
{
  return lhs.car_state == rhs.car_state &&
    lhs.is_rotation_finish == rhs.is_rotation_finish &&
    lhs.index == rhs.index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agv_robot::car_info_<ContainerAllocator1> & lhs, const ::agv_robot::car_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agv_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agv_robot::car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_robot::car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_robot::car_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_robot::car_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_robot::car_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_robot::car_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_robot::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7d5607215facbb525da609deffcf62b";
  }

  static const char* value(const ::agv_robot::car_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7d5607215facbb5ULL;
  static const uint64_t static_value2 = 0x25da609deffcf62bULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_robot::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_robot/car_info";
  }

  static const char* value(const ::agv_robot::car_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_robot::car_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 car_state #小车状态机\n"
"bool is_rotation_finish #旋转完成标志位\n"
"int32 index #第几个点\n"
;
  }

  static const char* value(const ::agv_robot::car_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_robot::car_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_state);
      stream.next(m.is_rotation_finish);
      stream.next(m.index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_robot::car_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_robot::car_info_<ContainerAllocator>& v)
  {
    s << indent << "car_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_state);
    s << indent << "is_rotation_finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_rotation_finish);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_ROBOT_MESSAGE_CAR_INFO_H
